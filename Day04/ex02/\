#include "main.h"
#include <stdlib.h>

#define UBRR_VALUE  (uint16_t)((float)((F_CPU / 16.0 / UART_BAUDRATE) + 0.5) - 1)

int ack = 0;

void error(uint8_t* msg)
{
	uart_printstr(msg);
	uart_printstr(" [");
	print_hex_value(TWSR);
	uart_printstr("]\n\r");
}

void print_hex_value(uint8_t n)
{
    char c = n >> 4;
    uart_tx(c < 10 ? c + '0' : c - 10 + 'A');
    c = n & 0x0F;
    uart_tx(c < 10 ? c + '0' : c - 10 + 'A');
}

void i2c_init(void)
{
	TWBR = ((F_CPU / 100000) - 16) / 2; // Set the Value of the TWI Bit Rate Register
}

void i2c_start(uint8_t addr, uint8_t wr)
{
	//WR -> [Read = 1] [Write = 0]
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Send START condition
	while (!(TWCR & (1<<TWINT))) {} // Wait for TWINT Flag set. Indicate the START condition
					// has been transmitted
	if (TW_STATUS != TW_START && TW_STATUS != 0x10) // Check value of TWI Status Register.
							// Mask prescaler bits.
	{
		error("i2c start() => TW_STATUS FAILED (TW_START)");
		return;
	}
	TWDR = (addr<<1) | wr; // Load Device Adrress into TWDR Register and Read/Write bit.
	TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWINT bit in TWCR to start transmission of address
	while (!(TWCR & (1<<TWINT))) {} // Wait for Flag set. This indicates that the SLA_W / SLA_R has
					// been transmitted, and ACK/NACK has been received.
	if (TW_STATUS != TW_MT_SLA_ACK && 
			TW_STATUS != TW_MR_SLA_ACK) // Check value of TWI Status Register.
						    // Mask prescaler bits.If status different
						    // from MT_SLA_ACK or MR_SLA_ACK go to ERROR.
	{
		error("i2c start() => TW_STATUS FAILED (MT_MT_SLA_ACK)");
		return;
	}
}

void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Send STOP condition
}

void i2c_write(unsigned char data)
{
	TWDR = data; // Load data into TWDR Register.
	TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWINT bit in TWCR to start transmission of address
	while (!(TWCR & (1<<TWINT))) {} // Wait for Flag set. This indicates that data has
					// been transmitted, and ACK/NACK has been received.
	if (TW_STATUS != TW_MT_DATA_ACK) // Check value of TWI Status Register. Mask prescaler bits.
	{				 // If status different from MT_SLA_ACK go to ERROR.
		error("i2c write() => TW_STATUS FAILED");
		return;
	}
}

void i2c_read(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (ack<<TWEA); // Set TWEA (ACK/NACK) and clear TWINT bit in
						     // TWCR to start transmission of address
	while (!(TWCR & (1<<TWINT))) {} // Wait for Flag set. This indicates that the data has
					// been received, and ACK/NACK has been transmitted.
	if (TW_STATUS != TW_MR_DATA_ACK &&
			TW_STATUS != TW_MR_DATA_NACK) // Check value of TWI Status Register.
	{					      // Mask prescaler bits. If status different
						      // from MT_DATA_ACK or MT_DATA_NACK go to ERROR.
		error("i2c read() => TW_STATUS FAILED");
		return;
	}
//	print_hex_value(TWDR); // Print Data
}

void uart_init(void)
{
	UBRR0H = (unsigned char)(UBRR_VALUE>>8); // Set Baud Rate Register High
	UBRR0L = (unsigned char)UBRR_VALUE; // Set Baud Rate Register Low 
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Receiver and Transmitter Enable
}

void uart_tx(char c)
{
	while (!(UCSR0A & (1<<UDRE0))) // While Data Register is not empty
	{
	}
	UDR0 = c; // Fill the data register with c
}

void uart_printstr(uint8_t* str)
{
	uint8_t c = 0;
	while (str[c])
	{
		uart_tx(str[c++]);
	}
}

char uart_rx(void)
{	
	while (!(UCSR0A & (1<<RXC0))) // While Data Register is not empty
	{
	}
	return (UDR0); // Return Usart Data Register
}

void convert(uint8_t data[5], uint32_t* rh_tab[3], uint32_t* t_tab[3])
{
	uint32_t rh = ((uint32_t)data[0]<<12) | ((uint32_t)data[1]<<4) | ((uint32_t)data[2]>>4);
	uint32_t t = ((uint32_t)CLR_BITS(data[2], 0b11110000)<<16) | ((uint32_t)data[3]<<8) | (data[2]);
	if (rh[2] == -1)
	{
		for (uint8_t i = 0; i < 2; ++i)
			rh_tab = rh;
			t_tab = t;
	}
	else
	{
		rh_tab[2] = rh;
		t_tab[2] = t;
	}
	rh_tab[0] = th_tab[1];
	rh_tab[1] = th_tab[2];
	uint8_t strrh[100];
	uint8_t strt[100];
	dtostrf((float)(rh / 1048576.0) * 100.0, 0, 3, strrh);
	dtostrf((float)(t / 1048576.0) * 200.0 - 50, 0, 2, strt);


	uart_printstr("Temperature: ");
	uart_printstr(strt);
	uart_printstr("Â°C, Humidity: ");
	uart_printstr(strrh);
	uart_printstr("%\n\r");
}

int main(void)
{
	uint8_t data[5];
	uint32_t humidity_tab[3] = {-1, -1, -1}
	uint32_t temperature_tab[3] = {-1, -1, -1};
	uart_init();
	i2c_init();
	_delay_ms(100);
	i2c_start(0x38, 0); // i2c_start in write mode
	i2c_write(0x71);
	i2c_stop();
	i2c_start(0x38, 1); // i2c_start in read mode
	if (!CHK_BITS(TWDR, (1<<3)))
	{
		i2c_stop();
		i2c_start(0x38, 0); // i2c_start in write mode
		i2c_write(0xbe);
		i2c_write(0x08);
		i2c_write(0x00);
		_delay_ms(10);
	}
	i2c_stop();
	while (1)
	{
		_delay_ms(100);
		i2c_start(0x38, 0);
		i2c_write(0xAC);
		i2c_write(0x33);
		i2c_write(0x00);
		i2c_stop();
		_delay_ms(80);
		i2c_start(0x38, 1); // i2c_start in read mode
		while (CHK_BITS(TWDR, (1<<7)))
			_delay_ms(80);
		ack = 1;
		i2c_read();
		for (uint8_t i = 0; i < 5; ++i)
		{
			i2c_read();
			data[i] = TWDR;
		}
		convert(data);
		ack = 0;
		i2c_read();
		i2c_stop();
	}
	return (0);
}
